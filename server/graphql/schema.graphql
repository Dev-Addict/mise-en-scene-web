### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AcceptAdminData {
  channel: ID!
}

input AddAdminData {
  admin: ID!
  channel: ID!
  permissions: [ChannelAdminPermission!]!
}

input AnnounceData {
  comment: ID
  gif: ID
  images: [Upload!]
  poll: AnnouncementPollData
  publishAt: Date
  reAnnouncement: ID
  text: String
}

type Announcement {
  comment: ID
  commentData: Announcement
  comments: Int!
  commentsData: [Announcement!]!
  dislike: Int!
  dislikeData: [AnnouncementDislike!]!
  gif: ID
  gifData: Gif
  id: ID!
  images: [ID]!
  imagesData: [Image!]!
  isDisliked: Boolean!
  isLiked: Boolean!
  like: Int!
  likeData: [AnnouncementLike!]!
  poll: ID
  pollData: AnnouncementPoll
  publishAt: Date
  published: Boolean!
  publishedAt: Date!
  reAnnouncement: ID
  reAnnouncementData: Announcement
  reAnnouncements: Int!
  reAnnouncementsData: [Announcement!]!
  text: String
  user: ID!
  userData: User!
}

type AnnouncementDislike {
  announcement: ID!
  announcementData: Announcement!
  id: ID!
  user: ID!
  userData: User!
}

type AnnouncementLike {
  announcement: ID!
  announcementData: Announcement!
  id: ID!
  user: ID!
  userData: User!
}

type AnnouncementPoll {
  id: ID!
  myVote: AnnouncementPollResult
  options: [String]!
  optionsData: [AnnouncementPollOption!]!
  question: String!
  votes: Int!
  votesData: [AnnouncementPollResult!]!
}

input AnnouncementPollData {
  options: [String!]!
  question: String!
}

type AnnouncementPollOption {
  index: Int!
  option: String!
  poll: ID!
  votes: Int!
  votesData: [AnnouncementPollResult!]!
}

type AnnouncementPollResult {
  id: ID!
  option: Int!
  poll: ID!
  pollData: AnnouncementPoll!
  user: ID!
  userData: User!
}

type AnnouncementsResponse {
  docs: [Announcement!]!
  limit: Int!
  page: Int!
  results: Int!
}

scalar AuthKey

type AuthResponse {
  token: String!
  user: User!
}

type Channel {
  admins: [ChannelAdmin!]!
  cover: String!
  handle: Username!
  id: ID!
  myAdmin: ChannelAdmin
  name: String!
  owner: ID!
  ownerData: User!
  verified: Boolean!
}

type ChannelAdmin {
  accepted: Boolean!
  channel: ID!
  channelData: Channel!
  id: ID!
  permissions: [ChannelAdminPermission!]!
  user: ID!
  userData: User!
}

enum ChannelAdminPermission {
  CREATE_NEW_ADMIN
  DELETE_POST
  EDIT_ADMINS_PERMISSIONS
  EDIT_OTHERS_POST
  POST
  REMOVE_ADMIN
}

type ChannelAdminsResponse {
  docs: [ChannelAdmin!]!
  limit: Int!
  page: Int!
  results: Int!
}

type ChannelsResponse {
  docs: [Channel!]!
  limit: Int!
  page: Int!
  results: Int!
}

input CheckAuthKeyData {
  authKey: AuthKey!
}

input CheckEmailData {
  email: Email!
}

input CheckHandleData {
  handle: Username!
}

input CheckUsernameData {
  username: Username!
}

scalar Date

input EditAdminPermissionsData {
  admin: ID!
  channel: ID!
  permissions: [ChannelAdminPermission!]!
}

scalar Email

input FollowData {
  following: ID!
}

input ForgotPasswordData {
  authKey: AuthKey!
}

enum Gender {
  CUSTOM
  FEMALE
  MALE
}

type Gif {
  giphyId: ID!
  height: Int!
  id: ID!
  title: String!
  url: String!
  width: Int!
}

type Image {
  alt: String
  directory: String!
  height: Float!
  id: ID!
  image: String!
  width: Float!
}

scalar JSON

type Mutation {
  acceptAdmin(data: AcceptAdminData!): ChannelAdmin
  addAdmin(data: AddAdminData!): ChannelAdmin!
  announce(data: AnnounceData!): Announcement
  checkAuthKey(data: CheckAuthKeyData!): Boolean!
  checkEmail(data: CheckEmailData!): Boolean!
  checkHandle(data: CheckHandleData!): Boolean
  checkUsername(data: CheckUsernameData!): Boolean!
  dislike(announcement: ID!): AnnouncementDislike!
  editAdminPermissions(data: EditAdminPermissionsData!): ChannelAdmin
  follow(data: FollowData!): UserFollow!
  forgotPassword(data: ForgotPasswordData!): User
  like(announcement: ID!): AnnouncementLike!
  rejectAdmin(data: RejectAdminData!): ChannelAdmin
  removeAdmin(data: RemoveAdminData!): ChannelAdmin
  requestChannel(data: RequestChannelData!): Channel!
  resetEmail(data: ResetEmailData!): AuthResponse
  resetEmailRequest(data: ResetEmailRequestData!): User
  resetPassword(data: ResetPasswordData!): AuthResponse
  resetPasswordRequest(data: ResetPasswordRequestData!): User
  signIn(data: SignInData!): AuthResponse!
  signUp(data: SignUpData!): AuthResponse!
  unfollow(data: FollowData!): UserFollow
  updateSelf(data: UpdateSelfData!): User
  validateResetEmailToken(data: ValidateResetEmailTokenData!): User
  validateResetPasswordToken(data: ValidateResetPasswordTokenData!): User
  vote(data: VoteData!): AnnouncementPollResult
}

scalar Name

scalar Password

type Query {
  admins(filter: JSON, limit: Int, page: Int, sort: JSON): ChannelAdminsResponse!
  announcement(id: ID!): Announcement
  announcements(filter: JSON, limit: Int, page: Int, sort: JSON): AnnouncementsResponse
  findChannel(filter: JSON!): Channel
  findGifs(limit: Int, page: Int, query: String!): [Gif!]!
  findUser(filter: JSON!): User
  myAnnouncements(filter: JSON, limit: Int, page: Int, sort: JSON): AnnouncementsResponse
  ownedChannels(filter: JSON, limit: Int, page: Int, sort: JSON): ChannelsResponse
  self: User!
  trendingGifs(limit: Int, page: Int): [Gif!]!
  userById(id: ID!): User
  users(filter: JSON, limit: Int, page: Int, sort: JSON): UsersResponse
}

input RejectAdminData {
  channel: ID!
}

input RemoveAdminData {
  admin: ID!
  channel: ID!
}

input RequestChannelData {
  cover: Upload
  handle: Username!
  name: String!
}

input ResetEmailData {
  email: Email!
  resetToken: String!
}

input ResetEmailRequestData {
  email: Email!
}

input ResetPasswordData {
  password: Password!
  resetToken: String!
}

input ResetPasswordRequestData {
  authKey: AuthKey!
}

input SignInData {
  authKey: AuthKey!
  password: Password!
}

input SignUpData {
  avatar: Upload
  bio: String
  birthday: Date
  displayName: String
  email: Email!
  firstname: Name
  gender: Gender
  lastname: Name
  password: Password!
  username: Username!
}

input UpdateSelfData {
  avatar: Upload
  bio: String
  birthday: Date
  displayName: String
  firstname: Name
  gender: Gender
  lastname: Name
  username: Username
}

scalar Upload

type User {
  announcements: Int!
  announcementsData: [Announcement!]!
  avatar: String!
  bio: String
  birthday: Date
  displayName: String
  email: Email!
  firstname: Name
  followers: Int!
  followersData: UserFollow!
  followings: Int!
  followingsData: UserFollow!
  gender: Gender
  id: ID!
  isFollowed: Boolean!
  lastname: Name
  username: Username!
}

type UserFollow {
  follower: ID!
  followerData: User!
  following: ID!
  followingData: User!
  id: ID!
}

scalar Username

type UsersResponse {
  docs: [User!]!
  limit: Int!
  page: Int!
  results: Int!
}

input ValidateResetEmailTokenData {
  resetToken: String!
}

input ValidateResetPasswordTokenData {
  resetToken: String!
}

input VoteData {
  option: Int!
  poll: ID!
}
