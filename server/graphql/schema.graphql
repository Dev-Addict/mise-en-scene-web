### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AcceptAdminData {
  channel: ID!
}

input AddAdminData {
  admin: ID!
  channel: ID!
  permissions: [ChannelAdminPermission!]!
}

input AnnounceData {
  comment: ID
  gif: ID
  images: [Upload!]
  poll: AnnouncementPollData
  publishAt: Date
  reAnnouncement: ID
  reply: ID
  text: String
}

type Announcement {
  comment: ID
  commentData: Announcement
  comments: Int!
  commentsData: [Announcement!]!
  dislike: Int!
  dislikeData: [AnnouncementDislike!]!
  gif: ID
  gifData: Gif
  id: ID!
  images: [ID]!
  imagesData: [Image!]!
  isDisliked: Boolean!
  isLiked: Boolean!
  like: Int!
  likeData: [AnnouncementLike!]!
  poll: ID
  pollData: AnnouncementPoll
  publishAt: Date
  published: Boolean!
  publishedAt: Date!
  reAnnouncement: ID
  reAnnouncementData: Announcement
  reAnnouncements: Int!
  reAnnouncementsData: [Announcement!]!
  reply: ID
  replyData: Post
  text: String
  user: ID!
  userData: User!
}

type AnnouncementDislike {
  announcement: ID!
  announcementData: Announcement!
  id: ID!
  user: ID!
  userData: User!
}

type AnnouncementLike {
  announcement: ID!
  announcementData: Announcement!
  id: ID!
  user: ID!
  userData: User!
}

type AnnouncementPoll {
  id: ID!
  myVote: AnnouncementPollResult
  options: [String]!
  optionsData: [AnnouncementPollOption!]!
  question: String!
  votes: Int!
  votesData: [AnnouncementPollResult!]!
}

input AnnouncementPollData {
  options: [String!]!
  question: String!
}

type AnnouncementPollOption {
  index: Int!
  option: String!
  poll: ID!
  votes: Int!
  votesData: [AnnouncementPollResult!]!
}

type AnnouncementPollResult {
  id: ID!
  option: Int!
  poll: ID!
  pollData: AnnouncementPoll!
  user: ID!
  userData: User!
}

type AnnouncementsResponse {
  docs: [Announcement!]!
  limit: Int!
  page: Int!
  results: Int!
}

scalar AuthKey

type AuthResponse {
  token: String!
  user: User!
}

type Channel {
  admins: [ChannelAdmin!]!
  cover: String!
  followers: Int!
  followersData: [ChannelFollow!]!
  handle: Username!
  id: ID!
  isFollowed: Boolean!
  myAdmin: ChannelAdmin
  name: String!
  owner: ID!
  ownerData: User!
  verified: Boolean!
}

type ChannelAdmin {
  accepted: Boolean!
  channel: ID!
  channelData: Channel!
  id: ID!
  permissions: [ChannelAdminPermission!]!
  user: ID!
  userData: User!
}

enum ChannelAdminPermission {
  CREATE_NEW_ADMIN
  DELETE_POST
  EDIT_ADMINS_PERMISSIONS
  EDIT_OTHERS_POST
  POST
  REMOVE_ADMIN
}

type ChannelAdminsResponse {
  docs: [ChannelAdmin!]!
  limit: Int!
  page: Int!
  results: Int!
}

type ChannelFollow {
  follower: ID!
  followerData: User!
  following: ID!
  followingData: Channel!
  id: ID!
}

input ChannelFollowData {
  following: ID!
}

type ChannelsResponse {
  docs: [Channel!]!
  limit: Int!
  page: Int!
  results: Int!
}

input CheckAuthKeyData {
  authKey: AuthKey!
}

input CheckEmailData {
  email: Email!
}

input CheckHandleData {
  handle: Username!
}

input CheckUsernameData {
  username: Username!
}

input CreatePostData {
  admin: ID
  body: JSON!
  channel: ID!
  cover: ID
  description: String
  publishAt: Date
  published: Boolean
  subtitle: String
  tags: [String!]
  title: String!
}

scalar Date

enum Device {
  DESKTOP
  PHONE
  TABLET
  TV
  UNKNOWN
}

input EditAdminPermissionsData {
  admin: ID!
  channel: ID!
  permissions: [ChannelAdminPermission!]!
}

scalar Email

input FollowData {
  following: ID!
}

input ForgotPasswordData {
  authKey: AuthKey!
}

enum Gender {
  CUSTOM
  FEMALE
  MALE
}

type Gif {
  giphyId: ID!
  height: Int!
  id: ID!
  title: String!
  url: String!
  width: Int!
}

type Image {
  alt: String
  directory: String!
  height: Float!
  id: ID!
  image: String!
  width: Float!
}

scalar JSON

type Mutation {
  acceptAdmin(data: AcceptAdminData!): ChannelAdmin
  addAdmin(data: AddAdminData!): ChannelAdmin!
  announce(data: AnnounceData!): Announcement
  checkAuthKey(data: CheckAuthKeyData!): Boolean!
  checkEmail(data: CheckEmailData!): Boolean!
  checkHandle(data: CheckHandleData!): Boolean
  checkUsername(data: CheckUsernameData!): Boolean!
  createPost(data: CreatePostData!): Post
  deleteAnnouncement(id: ID!): Announcement
  deletePost(id: ID!): Post
  dislike(announcement: ID!): AnnouncementDislike!
  editAdminPermissions(data: EditAdminPermissionsData!): ChannelAdmin
  follow(data: FollowData!): UserFollow!
  followChannel(data: ChannelFollowData!): ChannelFollow!
  forgotPassword(data: ForgotPasswordData!): User
  like(announcement: ID!): AnnouncementLike!
  ratePost(data: RatePostData!): PostRating!
  rejectAdmin(data: RejectAdminData!): ChannelAdmin
  removeAdmin(data: RemoveAdminData!): ChannelAdmin
  requestChannel(data: RequestChannelData!): Channel!
  resetEmail(data: ResetEmailData!): AuthResponse
  resetEmailRequest(data: ResetEmailRequestData!): User
  resetPassword(data: ResetPasswordData!): AuthResponse
  resetPasswordRequest(data: ResetPasswordRequestData!): User
  signIn(data: SignInData!): AuthResponse!
  signUp(data: SignUpData!): AuthResponse!
  unfollow(data: FollowData!): UserFollow
  unfollowChannel(data: ChannelFollowData!): ChannelFollow
  updateChannel(data: UpdateChannelData!, id: ID!): Channel
  updatePost(data: UpdatePostData!, id: ID!): Post
  updateSelf(data: UpdateSelfData!): User
  uploadImage(data: UploadImageData!): Image
  validateResetEmailToken(data: ValidateResetEmailTokenData!): User
  validateResetPasswordToken(data: ValidateResetPasswordTokenData!): User
  verifyEmail(data: VerifyEmailData!): AuthResponse
  verifyEmailRequest(data: VerifyEmailRequestData!): User
  view(data: ViewData!): View
  vote(data: VoteData!): AnnouncementPollResult
}

scalar Name

type Notification {
  announcement: ID
  announcementData: User
  id: ID!
  post: ID
  postData: Post
  seen: Boolean!
  to: ID!
  toData: User!
  type: NotificationType!
  user: ID
  userData: User
}

enum NotificationType {
  COMMENT
  DISLIKE
  FOLLOW
  LIKE
  POST
  RE_ANNOUNCEMENT
  UNFOLLOW
}

type NotificationsResponse {
  docs: [Notification!]!
  limit: Int!
  page: Int!
  results: Int!
}

enum OS {
  ANDROID
  BADA
  BLACKBERRYOS_OS
  CHROME_OS
  FIRE_OS
  IPAD_OS
  IPHONE_OS
  IPOD_OS
  LINUX
  MAC_OS
  RASPBERRY_OS
  SAMSUNG_OS
  UNKNOWN
  WINDOWS
  WINDOWS_PHONE
}

scalar Password

type Post {
  admin: ID
  adminData: ChannelAdmin
  body: String
  bodyData: JSON
  channel: ID!
  channelData: Channel!
  cover: ID
  coverData: Image
  description: String
  id: ID!
  myRating: PostRating
  publishAt: Date
  published: Boolean!
  publishedAt: Date!
  raters: Int!
  rating: Float!
  seen: Boolean!
  subtitle: String
  tags: [String!]!
  title: String!
  view: Int!
}

type PostRating {
  id: ID!
  post: ID!
  postData: Post!
  ratedAt: Date!
  rating: Int!
  user: ID!
  userData: User!
}

enum PostSort {
  FIRST
  LAST
  RATING
  RATING_DAY
  RATING_MONTH
  RATING_WEEK
  VIEW
  VIEW_DAY
  VIEW_MONTH
  VIEW_WEEK
}

type PostsResponse {
  docs: [Post!]!
  limit: Int!
  page: Int!
  results: Int!
}

type Query {
  admins(filter: JSON, limit: Int, page: Int, sort: JSON): ChannelAdminsResponse!
  announcement(id: ID!): Announcement
  announcements(filter: JSON, limit: Int, page: Int, sort: JSON): AnnouncementsResponse
  channelPost(id: ID!): Post
  channelPosts(channel: ID!, limit: Int, page: Int): PostsResponse
  findChannel(filter: JSON!): Channel
  findGifs(limit: Int, page: Int, query: String!): [Gif!]!
  findUser(filter: JSON!): User
  myAnnouncements(filter: JSON, limit: Int, page: Int, sort: JSON): AnnouncementsResponse
  myNotifications(limit: Int, page: Int, sort: JSON): NotificationsResponse
  myPosts(filter: JSON, limit: Int, page: Int, sort: JSON): PostsResponse
  ownedChannels(filter: JSON, limit: Int, page: Int, sort: JSON): ChannelsResponse
  post(id: ID!): Post
  posts(filter: JSON, limit: Int, page: Int, sort: PostSort): PostsResponse
  self: User!
  topPosts: [Post!]!
  trendingGifs(limit: Int, page: Int): [Gif!]!
  userById(id: ID!): User
  users(filter: JSON, limit: Int, page: Int, sort: JSON): UsersResponse
}

input RatePostData {
  post: ID!
  rating: Int!
}

input RejectAdminData {
  channel: ID!
}

input RemoveAdminData {
  admin: ID!
  channel: ID!
}

input RequestChannelData {
  cover: Upload
  handle: Username!
  name: String!
}

input ResetEmailData {
  email: Email!
  resetToken: String!
}

input ResetEmailRequestData {
  email: Email!
}

input ResetPasswordData {
  password: Password!
  resetToken: String!
}

input ResetPasswordRequestData {
  authKey: AuthKey!
}

input SignInData {
  authKey: AuthKey!
  password: Password!
}

input SignUpData {
  avatar: Upload
  bio: String
  birthday: Date
  displayName: String
  email: Email!
  firstname: Name
  gender: Gender
  lastname: Name
  password: Password!
  username: Username!
}

input UpdateChannelData {
  cover: Upload
  handle: Username
  name: String
}

input UpdatePostData {
  body: JSON
  cover: ID
  description: String
  publishAt: Date
  published: Boolean
  subtitle: String
  tags: [String!]
  title: String
}

input UpdateSelfData {
  avatar: Upload
  bio: String
  birthday: Date
  displayName: String
  firstname: Name
  gender: Gender
  lastname: Name
  username: Username
}

scalar Upload

input UploadImageData {
  alt: String
  image: Upload!
}

type User {
  announcements: Int!
  announcementsData: [Announcement!]!
  avatar: String!
  bio: String
  birthday: Date
  displayName: String
  email: Email!
  firstname: Name
  followers: Int!
  followersData: [UserFollow!]!
  followings: Int!
  followingsData: [UserFollow!]!
  gender: Gender
  id: ID!
  isFollowed: Boolean!
  lastname: Name
  notifications: Int!
  username: Username!
  verified: Boolean!
  verifiedEmail: Boolean!
}

type UserFollow {
  follower: ID!
  followerData: User!
  following: ID!
  followingData: User!
  id: ID!
}

scalar Username

type UsersResponse {
  docs: [User!]!
  limit: Int!
  page: Int!
  results: Int!
}

input ValidateResetEmailTokenData {
  resetToken: String!
}

input ValidateResetPasswordTokenData {
  resetToken: String!
}

input VerifyEmailData {
  verifyToken: String!
}

input VerifyEmailRequestData {
  email: Email!
}

type View {
  authed: Boolean!
  bot: Boolean!
  channel: ID
  channelData: Channel
  city: String!
  conversations: Boolean!
  country: String!
  device: Device!
  ended: Boolean!
  id: ID!
  ip: String!
  latitude: String!
  longitude: String!
  os: OS!
  page: String!
  post: ID
  postData: Post
  posts: Boolean!
  timeSpent: Int!
  user: ID
  userData: User
  version: String!
  viewEnd: Date!
  viewStart: Date!
}

input ViewData {
  channel: ID
  conversations: Boolean
  page: String!
  post: ID
  posts: Boolean
}

input VoteData {
  option: Int!
  poll: ID!
}
