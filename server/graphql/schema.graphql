### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Announcement {
  dislike: Int!
  dislikeData: [AnnouncementDislike!]!
  gif: ID
  gifData: Gif
  images: [ID]!
  imagesData: [Image]!
  like: Int!
  likeData: [AnnouncementLike!]!
  poll: ID
  pollData: AnnouncementPoll
  publishAt: Date
  text: String!
}

type AnnouncementDislike {
  announcement: ID!
  announcementData: Announcement!
  id: ID!
  user: ID!
  userData: User!
}

type AnnouncementLike {
  announcement: ID!
  announcementData: Announcement!
  id: ID!
  user: ID!
  userData: User!
}

type AnnouncementPoll {
  id: ID!
  options: [String]!
  optionsData: [AnnouncementPollOption!]!
  question: String!
  votes: Int!
  votesData: [AnnouncementPollResult!]!
}

type AnnouncementPollOption {
  index: Int!
  option: String!
  poll: ID!
  votes: Int!
  votesData: [AnnouncementPollResult!]!
}

type AnnouncementPollResult {
  id: ID!
  option: Int!
  poll: ID!
  pollData: AnnouncementPoll!
  user: ID!
  userData: User!
}

scalar AuthKey

type AuthResponse {
  token: String!
  user: User!
}

input CheckEmailData {
  email: Email!
}

input CheckUsernameData {
  username: Username!
}

scalar Date

scalar Email

input FollowData {
  following: ID!
}

enum Gender {
  CUSTOM
  FEMALE
  MALE
}

type Gif {
  giphyId: ID!
  height: Int!
  id: ID!
  title: String!
  url: String!
  width: Int!
}

type Image {
  alt: String
  directory: String!
  height: Float!
  id: ID!
  image: String!
  width: Float!
}

scalar JSON

type Mutation {
  checkEmail(data: CheckEmailData!): Boolean!
  checkUsername(data: CheckUsernameData!): Boolean!
  follow(data: FollowData!): UserFollow!
  signIn(data: SignInData!): AuthResponse!
  signUp(data: SignUpData!): AuthResponse!
  unfollow(data: FollowData!): UserFollow
}

scalar Name

scalar Password

type Query {
  findGifs(limit: Int, page: Int, query: String!): [Gif!]!
  findUser(filter: JSON): User
  self: User!
  trendingGifs(limit: Int, page: Int): [Gif!]!
  userById(id: ID): User
  users(filter: JSON, limit: Int, page: Int, sort: String): UsersResponse
}

input SignInData {
  authKey: AuthKey!
  password: Password!
}

input SignUpData {
  avatar: Upload
  bio: String
  birthday: Date
  displayName: String
  email: Email!
  firstname: Name
  gender: Gender
  lastname: Name
  password: Password!
  username: Username!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String!
  bio: String
  birthday: Date
  displayName: String
  email: Email!
  firstname: Name
  followers: Int!
  followersData: UserFollow!
  followings: Int!
  followingsData: UserFollow!
  gender: Gender
  id: ID!
  isFollowed: Boolean!
  lastname: Name
  username: Username!
}

type UserFollow {
  follower: ID!
  followerData: User!
  following: ID!
  followingData: User!
  id: ID!
}

scalar Username

type UsersResponse {
  docs: [User!]!
  limit: Int!
  page: Int!
  results: Int!
}
